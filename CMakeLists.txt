CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# ---------- BUILD TYPE ----------
IF( NOT CMAKE_BUILD_TYPE )
  SET( CMAKE_BUILD_TYPE "Debug" )
ENDIF()

# ---------- BUNDLE SETTINGS ----------
IF(APPLE)
  SET(VIPERSALL_BUNDLE OFF)
ELSE()
  OPTION(VIPERSALL_BUNDLE "Installation layout is a bundle (self-contained)" OFF )
ENDIF()

IF(VIPERSALL_BUNDLE)
  SET(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}/Install${CMAKE_BUILD_TYPE}" CACHE PATH "VIPERS install prefix" FORCE)
  MESSAGE(STATUS "Build as a bundle (self-contained) in ${CMAKE_INSTALL_PREFIX}" )
ENDIF()

IF(NOT DEFINED VIPERSALL_SOURCE_PACKAGE_TYPE)
  SET(VIPERSALL_SOURCE_PACKAGE_TYPE "TGZ;ZIP" CACHE STRING "CPack source package type (TGZ, TZ, TBZ2, STGZ, ZIP)")
ENDIF()
IF(NOT DEFINED VIPERSALL_VERSION)
  SET(VIPERSALL_VERSION "" CACHE STRING "Bundle version (usually the date formated as YYYYMMDD")
ENDIF()

IF(WIN32)
  # Check for NSIS installer creator
  FIND_PROGRAM(NSIS_PROG NSIS PATHS "C:/Program Files/NSIS")
  IF(NSIS_PROG MATCHES NSIS_PROG-NOTFOUND)
    MESSAGE(STATUS "NSIS installer creator NOT FOUND; won't be able to create a Windows installer")      
  ELSE()
    MESSAGE(STATUS "NSIS installer creator FOUND")
    OPTION(VIPERSALL_OPT_PKG_WINDOWS "Create a Windows installer" ON)
  ENDIF()
ELSEIF(APPLE)
  OPTION(VIPERSALL_OPT_PKG_DMG "Create a disk image (.dmg) package" ON)
ELSEIF(UNIX)
  OPTION(VIPERSALL_OPT_PKG_DEB "Create a Debian (.deb) package" OFF)
  OPTION(VIPERSALL_OPT_PKG_RPM "Create a RMP (.rmp) package" OFF)	
  OPTION(VIPERSALL_OPT_PKG_BIN "Create a Unix self installer (.sh)?" ON)
ENDIF()

IF(VIPERSALL_OPT_PKG_WINDOWS)
  SET(CPACK_GENERATOR "NSIS")
  MESSAGE(STATUS "Windows installer (.exe) will be created")
ENDIF()
IF(VIPERSALL_OPT_PKG_DMG)
  SET(CPACK_GENERATOR "PackageMaker")
  MESSAGE(STATUS "Disk Image (.dmg) will be created")
ENDIF()
IF(VIPERSALL_OPT_PKG_DEB)
  SET(CPACK_GENERATOR ${CPACK_GENERATOR} "DEB")
  MESSAGE(STATUS "Debian package (.deb) will be created")
ENDIF()
IF(VIPERSALL_OPT_PKG_RPM)
  SET(CPACK_GENERATOR ${CPACK_GENERATOR} "RPM")
  MESSAGE(STATUS "RPM package (.rpm) will be created")
ENDIF()
IF(VIPERSALL_OPT_PKG_BIN)
  SET(CPACK_GENERATOR ${CPACK_GENERATOR} "STGZ")
  MESSAGE(STATUS "Unix self installer (.sh) will be created")
ENDIF()

SET(VIPERSALL true)
ADD_SUBDIRECTORY( VIPERS )
ADD_SUBDIRECTORY( Modules )
ADD_SUBDIRECTORY( CLI )
ADD_SUBDIRECTORY( VisualVIPERS )
  
SET( CPACK_PACKAGE_NAME vipers )
IF(VIPERSALL_VERSION STREQUAL "")
  SET( CPACK_PACKAGE_FILE_NAME "vipers")
ELSE()
  SET( CPACK_PACKAGE_FILE_NAME "vipers-${VIPERSALL_VERSION}")
ENDIF()
SET( CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt)
SET( CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
SET( CPACK_PACKAGE_VERSION ${VIPERSALL_VERSION})
SET( CPACK_SOURCE_GENERATOR ${VIPERSALL_SOURCE_PACKAGE_TYPE})
SET( CPACK_SOURCE_IGNORE_FILES "/Install.*/;/Build.*/;/\\\\.svn/;.*~$;.*VIPERSConfig.hpp$;.*VIPERSConfig.cpp$")
SET( CPACK_PACKAGE_CONTACT "Frederic Jean <fjean@gel.ulaval.ca>")
SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "VIPERS is a Video and Image Processing Environment for Real-time Systems.  This package include VIPERS library (libvipers), Visual VIPERS (GUI), the command line interface program (CLI), and default modules.")

SET(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Basic Full Development)
SET(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Full Development)
SET(CPACK_COMPONENT_CLIAPP_INSTALL_TYPES Basic Full)
SET(CPACK_COMPONENT_GUIAPP_INSTALL_TYPES Basic Full)

INCLUDE( CPack )
