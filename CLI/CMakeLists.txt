CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(VIPERSCLI C CXX)

# ---------- VERSION ----------
SET(VIPERSCLI_VERSION_MAJOR  0)
SET(VIPERSCLI_VERSION_MINOR  5)
SET(VIPERSCLI_VERSION_PATCH  0)
SET(VIPERSCLI_VERSION ${VIPERSCLI_VERSION_MAJOR}.${VIPERSCLI_VERSION_MINOR}.${VIPERSCLI_VERSION_PATCH})

# ---------- FIND LIBRARIES ----------
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

# ---------- BUILD TYPE ----------
IF( NOT CMAKE_BUILD_TYPE )
  SET( CMAKE_BUILD_TYPE "Debug" )
ENDIF()

# Find VIPERS library
IF(NOT VIPERS_FOUND)
  FIND_PACKAGE(VIPERS REQUIRED)
ENDIF()
INCLUDE_DIRECTORIES( ${VIPERS_INCLUDE_DIR} )

# Find OpenCV
IF(NOT OpenCV_INCLUDE_DIRS)
  FIND_PACKAGE(OpenCV REQUIRED CV CXCORE HIGHGUI)
ENDIF()
INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} )

# ---------- SVN REVISION ----------
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} VIPERSCLI)
  SET(VIPERSCLI_SVN_REVISION ${VIPERSCLI_WC_REVISION})
  SET(VIPERSCLI_VERSION_REVISION "${VIPERSCLI_VERSION}-svn${VIPERSCLI_SVN_REVISION}")
  MESSAGE(STATUS "Current VIPERS CLI revision is ${VIPERSCLI_SVN_REVISION}" )
ELSE()
  SET(VIPERSCLI_SVN_REVISION "0")
  SET(VIPERSCLI_VERSION_REVISION ${VIPERSCLI_VERSION})
  MESSAGE(STATUS "VIPERS CLI revision could not be determined (subversion client not found)")
ENDIF()

# ---------- OS DEFINITIONS AND OPTIONS----------
IF(WIN32)
  IF(NOT DEFINED VIPERSALL)
    # Check for NSIS installer creator
    FIND_PROGRAM(NSIS_PROG NSIS PATHS "C:/Program Files/NSIS")
    if(NSIS_PROG MATCHES NSIS_PROG-NOTFOUND)
      MESSAGE(STATUS "NSIS installer creator NOT FOUND; won't be able to create a Windows installer")      
    ELSE()
      MESSAGE(STATUS "NSIS installer creator FOUND")
      OPTION(VIPERSCLI_OPT_PKG_WINDOWS "Create a Windows installer for VIPERS CLI" ON)
    ENDIF()
  ENDIF()

ELSEIF(APPLE)

  IF(NOT DEFINED VIPERSALL)
    OPTION(VIPERSCLI_OPT_PKG_DMG "Create a disk image (.dmg) package" ON)
  ENDIF()

ELSEIF(UNIX)

  IF(NOT DEFINED VIPERSALL)
    OPTION(VIPERSCLI_OPT_PKG_DEB "Create a Debian (.deb) package" OFF)
    OPTION(VIPERSCLI_OPT_PKG_RPM "Create a RMP (.rmp) package" OFF)	
    OPTION(VIPERSCLI_OPT_PKG_BIN "Create a Unix self installer (.sh)?" ON)
  ENDIF()

ENDIF()

# ---------- CONFIGURATION FILES ----------
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CLIConfig.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/CLIConfig.hpp)
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR})

# ---------- SOURCE FILES ----------
FILE(GLOB VIPERSCLISources *.cpp)
FILE(GLOB VIPERSCLIHeaders *.hpp)

# Set debug variable
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    ADD_DEFINITIONS(-DVIPERSCLI_DEBUG)
ENDIF()

# ---------- CREATE EXECUTABLE ----------
ADD_EXECUTABLE(viperscli ${VIPERSCLISources})
TARGET_LINK_LIBRARIES(viperscli ${VIPERS_LIBRARIES} ${OpenCV_LIBRARIES})

# ---------- INSTALL EXECUTABLE ----------
INSTALL(TARGETS viperscli DESTINATION bin COMPONENT cliapp)
IF(NOT WIN32 AND VIPERSALL_BUNDLE)
  INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/viperscli.sh DESTINATION bin PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE COMPONENT cliapp)
ENDIF()

SET(CPACK_COMPONENT_CLIAPP_DISPLAY_NAME "VIPERS Command Line Interface (CLI)" PARENT_SCOPE)
SET(CPACK_COMPONENT_CLIAPP_DESCRIPTION "Application to use the VIPERS library at the command line" PARENT_SCOPE)
SET(CPACK_COMPONENT_CLIAPP_GROUP "Runtime" PARENT_SCOPE)

# ---------- PACKAGE CREATION ----------
IF(NOT DEFINED VIPERSALL)

  IF(NOT DEFINED VIPERSCLI_SOURCE_PACKAGE_TYPE)
    SET(VIPERSCLI_SOURCE_PACKAGE_TYPE "TGZ;ZIP" CACHE STRING "CPack source package type (TGZ, TZ, TBZ2, STGZ, ZIP)")
  ENDIF()
  IF(VIPERSCLI_OPT_PKG_WINDOWS)
    SET(CPACK_GENERATOR "NSIS")
    MESSAGE(STATUS "Windows installer (.exe) will be created for VIPERS CLI")
  ENDIF()
  IF(VIPERSCLI_OPT_PKG_DMG)
    SET(CPACK_GENERATOR "PackageMaker")
    MESSAGE(STATUS "Disk Image (.dmg) will be created for VIPERS CLI")
  ENDIF()
  IF(VIPERSCLI_OPT_PKG_DEB)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "DEB")
    MESSAGE(STATUS "Debian package (.deb) will be created for VIPERS CLI")
  ENDIF()
  IF(VIPERSCLI_OPT_PKG_RPM)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "RPM")
    MESSAGE(STATUS "RPM package (.rpm) will be created for VIPERS CLI")
  ENDIF()
  IF(VIPERSCLI_OPT_PKG_BIN)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "STGZ")
    MESSAGE(STATUS "Unix self installer (.sh) will be created for VIPERS CLI")
  ENDIF()

  SET( CPACK_PACKAGE_NAME viperscli )
  SET( CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt)
  SET( CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
  SET( CPACK_PACKAGE_VERSION ${VIPERSCLI_VERSION})
  SET( CPACK_PACKAGE_VERSION_MAJOR ${VIPERSCLI_VERSION_MAJOR})
  SET( CPACK_PACKAGE_VERSION_MINOR ${VIPERSCLI_VERSION_MINOR})
  SET( CPACK_PACKAGE_VERSION_PATCH ${VIPERSCLI_VERSION_PATCH})
  SET( CPACK_SOURCE_GENERATOR ${VIPERSCLI_SOURCE_PACKAGE_TYPE})
  SET( CPACK_SOURCE_IGNORE_FILES "/Install.*/;/Build.*/;/\\\\.svn/;.*~$;.*VIPERSConfig.hpp$;.*VIPERSConfig.cpp$")
  SET( CPACK_PACKAGE_CONTACT "Frederic Jean <fjean@gel.ulaval.ca>")
  SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "VIPERS CLI is a command line interface to the VIPERS library.")
  INCLUDE( CPack )

ENDIF()
