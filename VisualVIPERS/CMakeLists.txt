CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(VISUALVIPERS C CXX)

# ---------- VERSION ----------
SET(VISUALVIPERS_VERSION_MAJOR  0)
SET(VISUALVIPERS_VERSION_MINOR  7)
SET(VISUALVIPERS_VERSION_PATCH  0)
SET(VISUALVIPERS_VERSION ${VISUALVIPERS_VERSION_MAJOR}.${VISUALVIPERS_VERSION_MINOR}.${VISUALVIPERS_VERSION_PATCH})

# ---------- BUILD TYPE ----------
IF( NOT CMAKE_BUILD_TYPE )
  SET( CMAKE_BUILD_TYPE "Debug" )
ENDIF()

# ---------- FIND LIBRARIES ----------
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules)

# Find VIPERS library
IF(NOT VIPERS_FOUND)
  FIND_PACKAGE(VIPERS REQUIRED)
ENDIF()
INCLUDE_DIRECTORIES( ${VIPERS_INCLUDE_DIR} )

# Work around in linux: since modules are linked to opencv, link gui to opencv too.
# Otherwise, the application crash when ModuleManager::clear() is called, during the last call
# to dlclose function (to unload the last module).  The crash occurs somewhere in libselinux.
# Find OpenCV
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  IF(NOT OpenCV_INCLUDE_DIRS)
    FIND_PACKAGE(OpenCV REQUIRED CV CXCORE HIGHGUI)
  ENDIF()
  INCLUDE_DIRECTORIES( ${OpenCV_INCLUDE_DIRS} )
  SET(VISUALVIPERS_TARGETLINK_OPTIONS ${OpenCV_LIBRARIES})
ELSE()
  SET(VISUALVIPERS_TARGETLINK_OPTIONS)
ENDIF()

# ---------- SVN REVISION ----------
FIND_PACKAGE(Subversion)
IF(Subversion_FOUND)
  Subversion_WC_INFO(${PROJECT_SOURCE_DIR} VISUALVIPERS)
  SET(VISUALVIPERS_SVN_REVISION ${VISUALVIPERS_WC_REVISION})
  SET(VISUALVIPERS_VERSION_REVISION "${VISUALVIPERS_VERSION}-svn${VISUALVIPERS_SVN_REVISION}")
  MESSAGE(STATUS "Current Visual VIPERS revision is ${VISUALVIPERS_SVN_REVISION}" )
ELSE()
  SET(VISUALVIPERS_SVN_REVISION "0")
  SET(VISUALVIPERS_VERSION_REVISION ${VISUALVIPERS_VERSION})
  MESSAGE(STATUS "Visual VIPERS revision could not be determined (subversion client not found)")
ENDIF()

# ---------- OS DEFINITIONS AND OPTIONS----------
IF(WIN32)

  SET(VISUALVIPERS_TARGET_NAME "VisualVIPERS")
  SET(GUI_TYPE WIN32)

  IF(NOT DEFINED VIPERSALL)
    # Check for NSIS installer creator
    FIND_PROGRAM(NSIS_PROG NSIS PATHS "C:/Program Files/NSIS")
    if(NSIS_PROG MATCHES NSIS_PROG-NOTFOUND)
      MESSAGE(STATUS "NSIS installer creator NOT FOUND; won't be able to create a Windows installer")      
    ELSE()
      MESSAGE(STATUS "NSIS installer creator FOUND")
      OPTION(VVISUALVIPERS_OPT_PKG_WINDOWS "Create a Windows installer for Visual VIPERS" ON)
    ENDIF()
  ENDIF()

ELSEIF(APPLE)

  SET(VISUALVIPERS_TARGET_NAME "VisualVIPERS")
  SET(GUI_TYPE MACOSX_BUNDLE)
  SET(MACOSX_BUNDLE_ICON_FILE icons/vipers.icns)
  #SET(MACOSX_BUNDLE_GUI_IDENTIFIER)
  SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${VISUALVIPERS_VERSION_REVISION})
  SET(MACOSX_BUNDLE_BUNDLE_NAME "VisualVIPERS")
  SET(MACOSX_BUNDLE_SHORT_VERSION_STRING ${VISUALVIPERS_VERSION})
  #SET(MACOSX_BUNDLE_BUNDLE_VERSION)
  SET(MACOSX_BUNDLE_COPYRIGHT "Frederic Jean")

  IF(NOT DEFINED VIPERSALL)
    OPTION(VISUALVIPERS_OPT_PKG_DMG "Create a disk image (.dmg) package" ON)
  ENDIF()
  
ELSEIF(UNIX)

  SET(VISUALVIPERS_TARGET_NAME "visualvipers")
  SET(GUI_TYPE "")

  IF(NOT DEFINED VIPERSALL)
    OPTION(VISUALVIPERS_OPT_PKG_DEB "Create a Debian (.deb) package" OFF)
    OPTION(VISUALVIPERS_OPT_PKG_RPM "Create a RMP (.rmp) package" OFF)	
    OPTION(VISUALVIPERS_OPT_PKG_BIN "Create a Unix self installer (.sh)?" ON)
  ENDIF()

ENDIF()

# ---------- SOURCE FILES ----------

FILE(GLOB VISUALVIPERSSources src/*.cpp)
FILE(GLOB VISUALVIPERSHeaders src/*.hpp)
FILE(GLOB VISUALVIPERSRessources res/*.qrc)

# ---------- CONFIGURATION FILES ----------

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/src/VisualVipersConfig.hpp.in ${CMAKE_CURRENT_BINARY_DIR}/src/VisualVipersConfig.hpp)
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_BINARY_DIR}/src ${CMAKE_CURRENT_SOURCE_DIR}/src)

# Check for QT4
FIND_PACKAGE(Qt4 REQUIRED)
INCLUDE(${QT_USE_FILE})

# Set debug variable
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  ADD_DEFINITIONS(-DVISUALVIPERS_DEBUG)
ELSE()
  ADD_DEFINITIONS(-DQT_NO_DEBUG)
ENDIF()

# ---------- CREATE EXECUTABLE ----------

# Windows ressources
IF(WIN32)
  IF(MINGW)
  # Resource compilation for MinGW
    ADD_CUSTOM_COMMAND(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/windows.rc.obj COMMAND windres.exe -I${CMAKE_CURRENT_SOURCE_DIR} -i${CMAKE_CURRENT_SOURCE_DIR}/res/windows.rc -o ${CMAKE_CURRENT_BINARY_DIR}/windows.rc.obj)
    SET(VISUALVIPERSSources ${VISUALVIPERSSources} ${CMAKE_CURRENT_BINARY_DIR}/windows.rc.obj)
  ELSE()
    SET(VISUALVIPERSSources ${VISUALVIPERSSources} res/windows.rc)
  ENDIF()	
ENDIF()

QT4_WRAP_CPP(VISUALVIPERSMOCSources ${VISUALVIPERSHeaders})
QT4_ADD_RESOURCES(VISUALVIPERSRCCSources ${VISUALVIPERSRessources})

ADD_EXECUTABLE(${VISUALVIPERS_TARGET_NAME} ${GUI_TYPE} ${VISUALVIPERSSources} ${VISUALVIPERSMOCSources} ${VISUALVIPERSRCCSources})
TARGET_LINK_LIBRARIES(${VISUALVIPERS_TARGET_NAME} vipers ${QT_LIBRARIES} ${VISUALVIPERS_TARGETLINK_OPTIONS})

# ---------- INSTALL EXECUTABLE AND RESSOURCES----------
IF(VIPERSALL_BUNDLE)  
  INSTALL(TARGETS ${VISUALVIPERS_TARGET_NAME} DESTINATION bin)
  IF(UNIX AND NOT APPLE)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/visualvipers.sh DESTINATION bin PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
  ENDIF()
ELSE()
  IF(WIN32)
    INSTALL(TARGETS ${VISUALVIPERS_TARGET_NAME} DESTINATION bin)
  ELSEIF(APPLE)
    INSTALL(TARGETS ${VISUALVIPERS_TARGET_NAME} DESTINATION /Applications)
  ELSEIF(UNIX)
    INSTALL(TARGETS ${VISUALVIPERS_TARGET_NAME} DESTINATION bin)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/16x16/vipers.png DESTINATION share/icons/hicolor/16x16/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/24x24/vipers.png DESTINATION share/icons/hicolor/24x24/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/32x32/vipers.png DESTINATION share/icons/hicolor/32x32/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/48x48/vipers.png DESTINATION share/icons/hicolor/48x48/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/64x64/vipers.png DESTINATION share/icons/hicolor/64x64/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/128x128/vipers.png DESTINATION share/icons/hicolor/128x128/apps)
    INSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/icons/scalable/vipers.svg DESTINATION share/icons/hicolor/scalable/apps)
  ENDIF()
ENDIF()

SET(CPACK_COMPONENT_GUIAPP_DISPLAY_NAME "Visual VIPERS" PARENT_SCOPE)
SET(CPACK_COMPONENT_GUIAPP_DESCRIPTION "Graphical user interface for VIPERS library" PARENT_SCOPE)
SET(CPACK_COMPONENT_GUIAPP_GROUP "Runtime" PARENT_SCOPE)

# ---------- PACKAGE CREATION ----------
IF(NOT DEFINED VIPERSALL)

  IF(NOT DEFINED VISUALVIPERS_SOURCE_PACKAGE_TYPE)
    SET(VISUALVIPERS_SOURCE_PACKAGE_TYPE "TGZ;ZIP" CACHE STRING "CPack source package type (TGZ, TZ, TBZ2, STGZ, ZIP)")
  ENDIF()
  IF(VISUALVIPERS_OPT_PKG_WINDOWS)
    SET(CPACK_GENERATOR "NSIS")
    MESSAGE(STATUS "Windows installer (.exe) will be created for Visual VIPERS")
  ENDIF()
  IF(VISUALVIPERS_OPT_PKG_DMG)
    SET(CPACK_GENERATOR "PackageMaker")
    MESSAGE(STATUS "Disk Image (.dmg) will be created for Visual VIPERS")
  ENDIF()
  IF(VISUALVIPERS_OPT_PKG_DEB)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "DEB")
    MESSAGE(STATUS "Debian package (.deb) will be created for Visual VIPERS")
  ENDIF()
  IF(VISUALVIPERS_OPT_PKG_RPM)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "RPM")
    MESSAGE(STATUS "RPM package (.rpm) will be created for Visual VIPERS")
  ENDIF()
  IF(VISUALVIPERS_OPT_PKG_BIN)
    SET(CPACK_GENERATOR ${CPACK_GENERATOR} "STGZ")
    MESSAGE(STATUS "Unix self installer (.sh) will be created for Visual VIPERS")
  ENDIF()

  SET( CPACK_PACKAGE_NAME visualvipers )
  SET( CPACK_RESOURCE_FILE_README ${CMAKE_CURRENT_SOURCE_DIR}/Readme.txt)
  SET( CPACK_RESOURCE_FILE_LICENSE ${CMAKE_CURRENT_SOURCE_DIR}/COPYING)
  SET( CPACK_PACKAGE_VERSION ${VISUALVIPERS_VERSION})
  SET( CPACK_PACKAGE_VERSION_MAJOR ${VISUALVIPERS_VERSION_MAJOR})
  SET( CPACK_PACKAGE_VERSION_MINOR ${VISUALVIPERS_VERSION_MINOR})
  SET( CPACK_PACKAGE_VERSION_PATCH ${VISUALVIPERS_VERSION_PATCH})
  SET( CPACK_SOURCE_GENERATOR ${VISUALVIPERS_SOURCE_PACKAGE_TYPE})
  SET( CPACK_SOURCE_IGNORE_FILES "/Install.*/;/Build.*/;/\\\\.svn/;.*~$;.*VIPERSConfig.hpp$;.*VIPERSConfig.cpp$")
  SET( CPACK_PACKAGE_CONTACT "Frederic Jean <fjean@gel.ulaval.ca>")
  SET( CPACK_PACKAGE_DESCRIPTION_SUMMARY "Visual VIPERS is a graphical user interface for the VIPERS library.")
  INCLUDE( CPack )

ENDIF()

